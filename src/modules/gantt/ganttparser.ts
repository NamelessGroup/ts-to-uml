import {DateTime} from "luxon";
import {ganttDates} from "./commitparser";

interface ganttArEntry {
    file: string;
    startDate: DateTime;
    endDate: DateTime;
}

/**
 * converts a Record<string, ganttDates> (generated by the commmitparser) to a mermaid gantt diagram
 * (-- call parseGanttDatesToMermaid(transformGitCommitHistory(commitHistory)) for instant gantt-mermaid-code --)
 * @param ganttDates the Record<string, ganttDates> generated by the commmitparser
 */
export function parseGanttDatesToMermaid(ganttDates: Record<string, ganttDates>): string {
    let ar: ganttArEntry[] = [];
    for (const key in ganttDates) {
        ar.push({file: key, startDate: ganttDates[key].startDate, endDate: ganttDates[key].endDate});
    }

    ar.sort((a, b) => {
        if (a.endDate < b.endDate) {
            return -1;
        } else if (a.endDate > b.endDate) {
            return 1;
        } else {
            return 0;
        }
    });

    ar.sort((a, b) => {
        if (a.startDate < b.startDate) {
            return -1;
        } else if (a.startDate > b.startDate) {
            return 1;
        } else {
            return 0;
        }
    });

    let returnString = "gantt\n";
    const indent = " ".repeat(4);
    returnString += indent + "dateFormat YYYY-MM-DD\n";
    returnString += indent + "title Git Commit History\n";

    for (const entry of ar) {
        returnString += indent + entry.file + ": " + entry.startDate.toFormat("yyyy-MM-dd") + ", " + entry.endDate.toFormat("yyyy-MM-dd") + "\n";
    }

    console.log(returnString);
    return returnString;
}